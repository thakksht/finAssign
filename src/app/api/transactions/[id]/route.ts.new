// filepath: c:\Users\aksha\Desktop\Projects\assignment\fin\src\app\api\transactions\[id]\route.ts
import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/db'

// Using hardcoded user ID as in transaction-actions.ts
const DEFAULT_USER_ID = 'user123'

// Helper function to ensure a default user exists in development environment
async function ensureUserExists() {
  const existingUser = await prisma.user.findUnique({
    where: { id: DEFAULT_USER_ID }
  })

  if (!existingUser) {
    await prisma.user.create({
      data: {
        id: DEFAULT_USER_ID,
        email: 'user@example.com',
        name: 'Test User'
      }
    })
  }
}

// Fixed route handlers with correct parameter types
export async function GET(
  request: NextRequest,
  context: { params: { id: string } }
) {
  try {
    // Ensure user exists
    await ensureUserExists()
    
    const id = context.params.id
    
    // Validate ID
    if (!id) {
      return NextResponse.json({ error: 'Transaction ID is required' }, { status: 400 })
    }
    
    // Get transaction from database
    const transaction = await prisma.transaction.findUnique({
      where: { 
        id,
        userId: DEFAULT_USER_ID
      },
      include: {
        category: true
      }
    })
    
    if (!transaction) {
      return NextResponse.json({ error: 'Transaction not found' }, { status: 404 })
    }
    
    return NextResponse.json(transaction)
  } catch (error) {
    console.error('Error fetching transaction:', error)
    return NextResponse.json(
      { error: 'Failed to fetch transaction' },
      { status: 500 }
    )
  }
}

export async function PUT(
  request: NextRequest,
  context: { params: { id: string } }
) {
  try {
    // Ensure user exists
    await ensureUserExists()
    
    const id = context.params.id
    const data = await request.json()
    
    // Find the transaction first to verify ownership
    const existingTransaction = await prisma.transaction.findUnique({
      where: {
        id,
        userId: DEFAULT_USER_ID
      }
    })
    
    if (!existingTransaction) {
      return NextResponse.json({ error: 'Transaction not found' }, { status: 404 })
    }
    
    // Update the transaction
    const updatedTransaction = await prisma.transaction.update({
      where: { id },
      data,
      include: { category: true }
    })
    
    return NextResponse.json(updatedTransaction)
  } catch (error) {
    console.error('Error updating transaction:', error)
    return NextResponse.json(
      { error: 'Failed to update transaction' },
      { status: 500 }
    )
  }
}

export async function DELETE(
  request: NextRequest,
  context: { params: { id: string } }
) {
  try {
    // Ensure user exists
    await ensureUserExists()
    
    const id = context.params.id
    
    // Find the transaction first to verify ownership
    const existingTransaction = await prisma.transaction.findUnique({
      where: {
        id,
        userId: DEFAULT_USER_ID
      }
    })
    
    if (!existingTransaction) {
      return NextResponse.json({ error: 'Transaction not found' }, { status: 404 })
    }
    
    // Delete the transaction
    await prisma.transaction.delete({
      where: { id }
    })
    
    return NextResponse.json({ success: true })
  } catch (error) {
    console.error('Error deleting transaction:', error)
    return NextResponse.json(
      { error: 'Failed to delete transaction' },
      { status: 500 }
    )
  }
}
